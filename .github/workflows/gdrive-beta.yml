name: Rootfs GDrive V2

on:
  workflow_dispatch: # Memungkinkan Anda untuk memicu workflow secara manual

jobs:
  process_file:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq xz-utils dosfstools gzip

      - name: Download file from Google Drive
        id: download
        env:
          GOOGLE_DRIVE_ACCESS_TOKEN: ${{ secrets.GOOGLE_DRIVE_ACCESS_TOKEN }}
        run: |
          # ID file Google Drive untuk diunduh
          FILE_ID="1LPzDblSeEZN-vUHh029AffkFCdffc78r"
          
          # Mendapatkan metadata file dari Google Drive untuk mengambil nama file asli
          RESPONSE=$(curl -s -H "Authorization: Bearer $GOOGLE_DRIVE_ACCESS_TOKEN" "https://www.googleapis.com/drive/v3/files/${FILE_ID}?fields=name")
          FILE_NAME=$(echo $RESPONSE | jq -r '.name')
          
          # Unduh file dengan nama asli
          DOWNLOAD_URL="https://www.googleapis.com/drive/v3/files/${FILE_ID}?alt=media"
          curl -L -o $FILE_NAME -H "Authorization: Bearer $GOOGLE_DRIVE_ACCESS_TOKEN" $DOWNLOAD_URL
          
          # Verifikasi bahwa file diunduh
          ls -l $FILE_NAME
          
          if [[ ! -f $FILE_NAME ]]; then
            echo "File image $FILE_NAME not found!"
            exit 1
          fi

      - name: Extract file and prepare rootfs
        run: |
          # Verifikasi file yang akan diproses
          echo "Processing file: $FILE_NAME"
          
          # Ekstrak file jika perlu
          if [[ $FILE_NAME == *.xz ]]; then
            xz -d $FILE_NAME
            FILE_NAME="${FILE_NAME%.xz}"
            echo "File extracted to: $FILE_NAME"
          elif [[ $FILE_NAME == *.gz ]]; then
            gunzip $FILE_NAME
            FILE_NAME="${FILE_NAME%.gz}"
            echo "File extracted to: $FILE_NAME"
          fi
          
          # Tentukan nama file .img setelah diekstrak
          IMG_FILE=$FILE_NAME
          
          # Verifikasi bahwa file .img ada
          echo "Checking for image file: $IMG_FILE"
          if [[ ! -f $IMG_FILE ]]; then
            echo "File image $IMG_FILE not found!"
            exit 1
          fi
          
          # Tentukan nama file rootfs
          ROOTFS_FILE="${FILE_NAME%.img}-rootfs.img"
          
          # Gunakan dd untuk mengekstrak partisi rootfs
          # Asumsi partisi rootfs ada di offset 2048 (ubah sesuai kebutuhan)
          OFFSET=$((2048 * 512)) # Offset dalam byte
          echo "Extracting rootfs with dd"
          dd if=$IMG_FILE of=$ROOTFS_FILE bs=512 skip=$((OFFSET / 512)) || { echo "dd command failed!"; exit 1; }
          
          # Ekstrak rootfs jika diperlukan
          mkdir -p /mnt/rootfs
          echo "Mounting $ROOTFS_FILE to /mnt/rootfs"
          sudo mount -o loop $ROOTFS_FILE /mnt/rootfs || { echo "Failed to mount $ROOTFS_FILE"; exit 1; }
          
          # Kompres rootfs menjadi <nama-file>-rootfs.tar.gz
          TAR_FILE="${FILE_NAME%.img}-rootfs.tar.gz"
          echo "Creating tar.gz file: $TAR_FILE"
          tar -czf $TAR_FILE -C /mnt/rootfs . || { echo "Failed to create tar.gz file"; exit 1; }
          
          # Unmount dan bersihkan
          echo "Unmounting /mnt/rootfs"
          sudo umount /mnt/rootfs || { echo "Failed to unmount /mnt/rootfs"; exit 1; }
          echo "Removing /mnt/rootfs directory"
          rmdir /mnt/rootfs || { echo "Failed to remove /mnt/rootfs"; exit 1; }

      - name: Upload rootfs.tar.gz to Google Drive
        env:
          GOOGLE_DRIVE_ACCESS_TOKEN: ${{ secrets.GOOGLE_DRIVE_ACCESS_TOKEN }}
        run: |
          # ID folder Google Drive untuk mengupload file
          PARENT_FOLDER_ID="1YHEODaFpIJbrsnuu2SoWgqSjrZPkTVzB"
          FILE_NAME="${FILE_NAME%.img}-rootfs.tar.gz"
          
          if [[ ! -f $FILE_NAME ]]; then
            echo "File $FILE_NAME not found!"
            exit 1
          fi
          
          # Upload file ke Google Drive
          curl -X POST -L \
            -H "Authorization: Bearer $GOOGLE_DRIVE_ACCESS_TOKEN" \
            -F "metadata={name : '$FILE_NAME', parents : ['$PARENT_FOLDER_ID']};type=application/json;charset=UTF-8" \
            -F "file=@$FILE_NAME;type=application/gzip" \
            "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart" || { echo "Failed to upload file to Google Drive"; exit 1; }
